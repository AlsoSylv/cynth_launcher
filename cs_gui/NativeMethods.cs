// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "csbindings";



        [DllImport(__DllName, EntryPoint = "new_launcher", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LauncherPointer* new_launcher();

        /// <summary># Safety No</summary>
        [DllImport(__DllName, EntryPoint = "get_version_manifest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TaskWrapper* get_version_manifest(LauncherPointer* launcher);

        /// <summary># Safety No</summary>
        [DllImport(__DllName, EntryPoint = "poll_manifest_task", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool poll_manifest_task(TaskWrapper* task);

        /// <summary># Safety No</summary>
        [DllImport(__DllName, EntryPoint = "get_manifest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ManifestWrapper* get_manifest(TaskWrapper* task);

        /// <summary># Safety</summary>
        [DllImport(__DllName, EntryPoint = "get_latest_release", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern StringWrapper get_latest_release(ManifestWrapper* manifest);

        /// <summary># Safety</summary>
        [DllImport(__DllName, EntryPoint = "get_manifest_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint get_manifest_len(ManifestWrapper* manifest);

        /// <summary># Safety</summary>
        [DllImport(__DllName, EntryPoint = "get_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern StringWrapper get_name(ManifestWrapper* manifest, nuint index);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct LauncherPointer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ManifestWrapper
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct TaskWrapper
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct StringWrapper
    {
        public byte* char_ptr;
        public nuint len;
    }



}
    